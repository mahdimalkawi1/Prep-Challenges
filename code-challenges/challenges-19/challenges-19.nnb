{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Hacker Rank\n\nFor Thursdays you will be solving some selected challenges on HackerRank, please create an account if you don't have then\nFollow the links below:\nread them carefully and solve them then copy-paste your solution below in Code Block"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Required**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Append And Delete](https://www.hackerrank.com/challenges/append-and-delete/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'appendAndDelete' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. STRING t\n *  3. INTEGER k\n */\n\nfunction appendAndDelete(s, t, k) {\n    // Write your code here\n    let commonLength = 0;\n  for (let i = 0; i < Math.min(s.length, t.length); i++) {\n    if (s[i] === t[i]) {\n      commonLength++;\n    } else {\n      break;\n    }\n  }\n\n  if (s.length + t.length - 2 * commonLength > k) {\n    return \"No\";\n  } else if ((s.length + t.length - 2 * commonLength) % 2 === k % 2) {\n    return \"Yes\";\n  } else if (s.length + t.length - k < 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const t = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = appendAndDelete(s, t, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Optional**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Encryption](https://www.hackerrank.com/challenges/encryption/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    // Write your code here\nconst noSpaces = s.replace(/\\s/g, '');\n\n    const len = noSpaces.length;\n    const sqrt = Math.sqrt(len);\n    const rows = Math.floor(sqrt);\n    const cols = Math.ceil(sqrt);\n\n    let result = '';\n    for (let i = 0; i < cols; i++) {\n        let temp = '';\n        for (let j = i; j < len; j += cols) {\n            temp += noSpaces[j];\n        }\n        result += `${temp} `;\n    }\n\n    return result.trim();\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [The Time In Words](https://www.hackerrank.com/challenges/the-time-in-words/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {\n    // Write your code here\nconst ones = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"];\n    const tens = [\"twenty\", \"thirty\", \"forty\", \"fifty\"];\n    const hour = ones[h-1];\n    let minutes;\n\n    if (m == 0) {\n        return hour + \" o' clock\";\n    } else if (m == 1) {\n        return \"one minute past \" + hour;\n    } else if (m == 15) {\n        return \"quarter past \" + hour;\n    } else if (m < 30) {\n        if (m < 20) {\n            minutes = ones[m-1];\n        } else {\n            minutes = tens[Math.floor(m/10)-2] + (m%10 !== 0 ? \" \" + ones[m%10-1] : \"\");\n        }\n        return minutes + \" minutes past \" + hour;\n    } else if (m == 30) {\n        return \"half past \" + hour;\n    } else if (m == 45) {\n        return \"quarter to \" + ones[h];\n    } else {\n        const remain = 60 - m;\n        if (remain < 20) {\n            minutes = ones[remain-1];\n        } else {\n            minutes = tens[Math.floor(remain/10)-2] + (remain%10 !== 0 ? \" \" + ones[remain%10-1] : \"\");\n        }\n        return minutes + \" minutes to \" + ones[h];\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        }
    ]
}